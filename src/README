League of OOP

    The project structure is the following:

    -abilities
        -knight
            -Execute.java: implements Execute ability
            -Slam.java: implements Slam ability

        -pyromancer
            -FireBlast.java: implements Fireblast ability
            -Ignite.java: implements Ignite ability

        -rogue
            -Backstab.java: implements Backstab ability
            -Paralysis.java: implements Paralysis ability

        -wizard
            -Deflect.java: implements Deflect ability
            -Drain.java: implements Drain ability

        -Ability.java: basic ability functionality
        -AbilityInterface.java: ability interface for Visitor pattern and
                                ability parameters computing
        -AbilityParameters.java: holds the useful ability parameters
        -AbilityPriority.java: used for prioritizing abilities


    -common
         -Constants.java: meaningful constants


     -util
         -Pair.java: implements generic pair (using javafx.util.Pair would
                     give me an error)


     -characters
         -angels
             -types: contains all angel type implementations
                 -DamageAngel.java
                 -DarkAngel.java
                 -Dracula.java
                 -GoodBoy.java
                 -LevelUpAngel.java
                 -LifeGiver.java
                 -SmallAngel.java
                 -Spawner.java
                 -TheDoomer.java
                 -XPAngel.java

             -Angel.java: implements basic angel functionality
             -AngelEffect.java: stores effects of angel on hero
             -AngelFactory.java: creates angel objects
             -AngelInterface.java: interface for Visitor pattern used in
                                   angel-hero interaction

         -heroes
             -races
                 -Knight.java: implements Knight hero
                 -Pyromancer.java: implements Pyromancer hero
                 -Rogue.java: implements Rogue hero
                 -Wizard.java: implements Wizard hero

            -Hero.java: basic hero functionality
            -HeroFactory.java: provides hero objects
            -HeroInterface.java: implements interface for Visitor pattern
            -HeroPriority.java: used for prioritizing characters.heroes when
                                fighting (eg. Wizard (second) vs. other (first))
            -MovementOffsetFactory.java: provides movement offset given a
                                         direction

        -EventType.java: enum with event types
        -GreatMage.java: the great mage that acts as the observer
        -Observable.java: common interface for Observable objects
        -Observer.java: common interface for Observer objects


    -main
        -Fight.java: implements fighting between two characters.heroes
        -Game.java: implements game logic
        -GameInputLoader.java: loads input and creates game
        -Main.java: main method


    -map
         -terrain
             -Desert.java: Desert terrain
             -Land.java: Land terrain
             -Terrain.java: terrain interface for Visitor pattern
             -Volcanic.java: Volcanic terrain
             -Woods.java: Woods terrain

         -Map.java: Singleton map used for retrieving terrain at a coordinate


    -strategies
        -types: contains all hero race strategy particularities
            -KnightStrategy.java
            -PyromancerStrategy.java
            -RogueStrategy.java
            -WizardStrategy.java

        -Strategy.java: implements the basic functionality of the strategies
        -StrategyInterface.java: common interface for strategies

    -xp
        -XPManager.java: manages XP after a fight and calculates XP needed for
                         level up



    Every round, each player takes overtime damage if any, applies a strategy
and moves to the new location. Then, for each hero, an enemy to fight is
searched (with a bigger id in order to avoid fighting two times). In a fight,
the two heroes set their enemies and compute their attacks parameters. For
abilities that use percentages, I saved the values as ints and they are then
divided by 100.0f when needed. Then, each hero takes damage and overtime
incapacitation and/or damage. Health is recalculated and alive status is
updated. If al least one hero is killed in a fight, xp gain(s) are calculated
and heroes level up if they have enough XP. If a hero gets killed in a fight,
the Great Mage is notified.

    Then, angels are spawned and have different effects on the heroes. Whenever
an angel is spawned, the Great Mage is notified. When a hero and an angel are
at the same coordinates, the hero retieves the effects the angel would have on
him. When providing the effects, the angels check if they can interact with a
hero. If they can, they notify the Great Mage and provide the effects, otherwise
the effects provided do not influence the hero. The Great Mage is also notified
whenever a hero's alive status is changed after interacting with an angel.


    I used Visitor pattern for retrieving the terrain modifier (hero = visitor,
terrain = visited), race modifier (ability = visitor, hero = visited) and for
the angel-hero interaction (angel=visitor, hero=visited).

    The Observer pattern is used for angel/hero (observable) - GreatMage
(observer) interaction.


    I used Strategy pattern to implement the hero strategies. The interface
contains only the apply method needed by heroes. The abstract class contains the
general logic of a strategy, depending on several constants that are provided
by the particular strategy class corresponding to each hero race.

    Other design patterns:
        -Singleton: Map, GreatMage
        -Factory: MovementOffsetFactory, HeroFactory, AngelFactory


    OOP concepts used:
        -aggregation: hero has an ability, an ability has an owner, a game
         has heroes etc.
        -inheritance and polymorphism: specialized abilities extend the basic
         ability, hero races extend basic hero
